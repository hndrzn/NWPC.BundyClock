@page "/autocomplete"
@inject IEmployeeServices EmployeeService

<link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />

<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudAutocomplete T="EmployeeData" Label="Search Employee" @bind-Value="selectedEmployee" SearchFunc="@SearchEmployees"
                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary">
            <ItemTemplate Context="result">
                <MudItem Class="d-flex align-center">
                    <MudChip Variant="Variant.Outlined" Color="Color.Primary">@result.EmployeeID.ToString()</MudChip>
                    <MudText>@result.EmployeeName</MudText>
                </MudItem>
            </ItemTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem xs="12" md="12">
        <MudText Class="mb-n3" Typo="Typo.body2">
            <MudChip>@(selectedEmployee != null ? $"{selectedEmployee.EmployeeName} ({selectedEmployee.EmployeeID})" : "Not selected")</MudChip>
        </MudText>
    </MudItem>
</MudGrid>

@code { 

    public EmployeeData selectedEmployee;
    public List<EmployeeData> Employees;

    protected override async Task OnInitializedAsync()
    {
        Employees = await EmployeeService.GetAllEmployees();
    }

    public async Task<IEnumerable<EmployeeData>> SearchEmployees(string? searchText)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(searchText) || Employees == null)
            return new List<EmployeeData>();

        return Employees.Where(employee => employee.EmployeeName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase));
    }
}
